// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project334.Data;

namespace Project334.Migrations
{
    [DbContext(typeof(Project334Context))]
    [Migration("20210511143051_MyMigration")]
    partial class MyMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Project334.Models.Address", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Country")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("DangerousCaseID")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StreetNumber")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.HasKey("ID");

                    b.HasIndex("DangerousCaseID");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Project334.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BookAppointmentID")
                        .HasColumnType("int");

                    b.Property<bool>("EligibilityToVaccine")
                        .HasColumnType("bit");

                    b.Property<int>("MedicalInstitutionID")
                        .HasColumnType("int");

                    b.Property<int?>("VaccineID")
                        .HasColumnType("int");

                    b.HasKey("AppointmentID");

                    b.HasIndex("BookAppointmentID");

                    b.HasIndex("MedicalInstitutionID");

                    b.HasIndex("VaccineID");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("Project334.Models.BookAppointment", b =>
                {
                    b.Property<int>("BookAppointmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("EligibilityToVaccine")
                        .HasColumnType("bit");

                    b.Property<int>("MedicalInstitutionID")
                        .HasColumnType("int");

                    b.Property<string>("Medicare")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("PatientID")
                        .HasColumnType("int");

                    b.HasKey("BookAppointmentID");

                    b.HasIndex("PatientID");

                    b.ToTable("BookAppointment");
                });

            modelBuilder.Entity("Project334.Models.Business", b =>
                {
                    b.Property<int>("BusinessID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ABN")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<int?>("CompanyAddressID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("BusinessID");

                    b.HasIndex("CompanyAddressID");

                    b.ToTable("Business");
                });

            modelBuilder.Entity("Project334.Models.BusinessActivity", b =>
                {
                    b.Property<int>("BusinessActivityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessID")
                        .HasColumnType("int");

                    b.Property<DateTime>("WorkingDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BusinessActivityID");

                    b.HasIndex("BusinessID");

                    b.ToTable("BusinessActivity");
                });

            modelBuilder.Entity("Project334.Models.MedicalInstitution", b =>
                {
                    b.Property<int>("MedicalInstitutionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MedicalAddressID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("MedicalInstitutionID");

                    b.HasIndex("MedicalAddressID");

                    b.ToTable("MedicalInstitution");
                });

            modelBuilder.Entity("Project334.Models.Person", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstMidName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ID");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("Project334.Models.Vaccine", b =>
                {
                    b.Property<int>("VaccineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("VaccineID");

                    b.HasIndex("PatientID");

                    b.ToTable("Vaccine");
                });

            modelBuilder.Entity("Project334.Models.DangerousCase", b =>
                {
                    b.HasBaseType("Project334.Models.Person");

                    b.Property<DateTime>("ConfirmDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasVaccine")
                        .HasColumnType("bit");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.ToTable("DangerousCase");
                });

            modelBuilder.Entity("Project334.Models.Patient", b =>
                {
                    b.HasBaseType("Project334.Models.Person");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HadVirus")
                        .HasColumnType("bit");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("Project334.Models.VisitorCheckIn", b =>
                {
                    b.HasBaseType("Project334.Models.Person");

                    b.Property<int>("BusinessActivityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("datetime2");

                    b.HasIndex("BusinessActivityID");

                    b.ToTable("VisitorCheckIn");
                });

            modelBuilder.Entity("Project334.Models.VisitorCheckOut", b =>
                {
                    b.HasBaseType("Project334.Models.Person");

                    b.Property<int>("BusinessActivityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("datetime2");

                    b.HasIndex("BusinessActivityID");

                    b.ToTable("VisitorCheckOut");
                });

            modelBuilder.Entity("Project334.Models.Address", b =>
                {
                    b.HasOne("Project334.Models.DangerousCase", null)
                        .WithMany("VisitedPlaces")
                        .HasForeignKey("DangerousCaseID");
                });

            modelBuilder.Entity("Project334.Models.Appointment", b =>
                {
                    b.HasOne("Project334.Models.BookAppointment", "BookAppointment")
                        .WithMany()
                        .HasForeignKey("BookAppointmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project334.Models.MedicalInstitution", null)
                        .WithMany("Appointment")
                        .HasForeignKey("MedicalInstitutionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project334.Models.Vaccine", "Vaccine")
                        .WithMany()
                        .HasForeignKey("VaccineID");

                    b.Navigation("BookAppointment");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("Project334.Models.BookAppointment", b =>
                {
                    b.HasOne("Project334.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Project334.Models.Business", b =>
                {
                    b.HasOne("Project334.Models.Address", "CompanyAddress")
                        .WithMany()
                        .HasForeignKey("CompanyAddressID");

                    b.Navigation("CompanyAddress");
                });

            modelBuilder.Entity("Project334.Models.BusinessActivity", b =>
                {
                    b.HasOne("Project334.Models.Business", null)
                        .WithMany("DailyActivities")
                        .HasForeignKey("BusinessID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project334.Models.MedicalInstitution", b =>
                {
                    b.HasOne("Project334.Models.Address", "MedicalAddress")
                        .WithMany()
                        .HasForeignKey("MedicalAddressID");

                    b.Navigation("MedicalAddress");
                });

            modelBuilder.Entity("Project334.Models.Vaccine", b =>
                {
                    b.HasOne("Project334.Models.Patient", null)
                        .WithMany("Vaccines")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project334.Models.DangerousCase", b =>
                {
                    b.HasOne("Project334.Models.Person", null)
                        .WithOne()
                        .HasForeignKey("Project334.Models.DangerousCase", "ID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project334.Models.Patient", b =>
                {
                    b.HasOne("Project334.Models.Person", null)
                        .WithOne()
                        .HasForeignKey("Project334.Models.Patient", "ID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project334.Models.VisitorCheckIn", b =>
                {
                    b.HasOne("Project334.Models.BusinessActivity", null)
                        .WithMany("VisitorCheckIn")
                        .HasForeignKey("BusinessActivityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project334.Models.Person", null)
                        .WithOne()
                        .HasForeignKey("Project334.Models.VisitorCheckIn", "ID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project334.Models.VisitorCheckOut", b =>
                {
                    b.HasOne("Project334.Models.BusinessActivity", null)
                        .WithMany("VisitorCheckOut")
                        .HasForeignKey("BusinessActivityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project334.Models.Person", null)
                        .WithOne()
                        .HasForeignKey("Project334.Models.VisitorCheckOut", "ID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project334.Models.Business", b =>
                {
                    b.Navigation("DailyActivities");
                });

            modelBuilder.Entity("Project334.Models.BusinessActivity", b =>
                {
                    b.Navigation("VisitorCheckIn");

                    b.Navigation("VisitorCheckOut");
                });

            modelBuilder.Entity("Project334.Models.MedicalInstitution", b =>
                {
                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Project334.Models.DangerousCase", b =>
                {
                    b.Navigation("VisitedPlaces");
                });

            modelBuilder.Entity("Project334.Models.Patient", b =>
                {
                    b.Navigation("Vaccines");
                });
#pragma warning restore 612, 618
        }
    }
}
